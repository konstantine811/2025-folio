import { RigidBody } from "@react-three/rapier";
import { useEffect, useRef } from "react";
import { Mesh, PlaneGeometry } from "three";
import { useGameDataStore } from "./character-controller/stores/game-data-store";
// import { ThreeEvent } from "@react-three/fiber";
// import { button, useControls } from "leva";
import useTouchTexture from "@/hooks/three-world/useTouchTexture";
// import { useTexture } from "@react-three/drei";
import { useEditModeStore } from "../store/useEditModeStore";

const Ground = () => {
  const { width, height } = { width: 100, height: 100 };
  // const [isDrawing, setIsDrawing] = useState(false);
  // const [cursorPos, setCurPos] = useState(new Vector3());
  // const textureMap = useTexture("/images/textures/grassTexture.jpg");
  const setTargetMesh = useEditModeStore((s) => s.setTargets);
  const floorRef = useRef<Mesh<PlaneGeometry>>(null!);
  const setCharacterGroundMesh = useGameDataStore(
    (s) => s.setCharacterGroundMesh
  );
  useEffect(() => {
    if (floorRef.current) {
      setCharacterGroundMesh(floorRef.current);
      setTargetMesh(floorRef.current);
    }
  }, [floorRef, setCharacterGroundMesh, setTargetMesh]);

  // // --- Leva ---
  // const [controls] = useControls("üé® Paint", () => ({
  //   drawMode: { value: false, label: "Draw mode" },
  //   persist: { value: true, label: "Persist" },
  //   radius: {
  //     value: 0.005,
  //     min: 0.001,
  //     max: 0.05,
  //     step: 0.001,
  //     label: "Radius (UV)",
  //   },
  //   testCanvas: { value: false, label: "Show debug canvas" },
  //   saveNow: button(() => saveAsDataURL("touchTexture.png", true)),
  //   clear: button(() => clear()),
  // }));

  // const { onPointerMove, clear, saveAsDataURL } = useTouchTexture({
  //   size: 256,
  //   radius: controls.radius,
  //   persist: controls.persist,
  //   isTest: controls.testCanvas,
  // });

  // // –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏–º–∫–Ω–µ–Ω–Ω—ñ —Ä–µ–∂–∏–º—É –º–∞–ª—é–≤–∞–Ω–Ω—è
  // const prevDraw = useRef(controls.drawMode);
  // useEffect(() => {
  //   if (prevDraw.current && !controls.drawMode) {
  //     // –í–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É ‚Üí –∑–±–µ—Ä–µ–≥—Ç–∏
  //     saveAsDataURL("touchTexture.png", true);
  //   }
  //   prevDraw.current = controls.drawMode;
  // }, [controls.drawMode, saveAsDataURL]);

  // // –Ø–∫—â–æ –∑–º—ñ–Ω—é—î–º–æ persist –∞–±–æ radius –≤ Leva ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä, —Ö—É–∫ —É–∂–µ –±–µ—Ä–µ –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è

  // // –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä–∞–¥—ñ—É—Å—É –∫—É—Ä—Å–æ—Ä–∞ —É —Å–≤—ñ—Ç–æ–≤–∏—Ö –æ–¥–∏–Ω–∏—Ü—è—Ö –ø—ñ–¥ –ø–ª–æ—â–∏–Ω—É (–≥—Ä—É–±–µ —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –∑ UV)
  // const worldCursorRadius = (width + height) * 0.5 * controls.radius; // –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è: UV (0..1) –Ω–∞ —à–∏—Ä–∏–Ω—É/–≤–∏—Å–æ—Ç—É

  // const handlePointerDown = (e: ThreeEvent<PointerEvent>) => {
  //   if (!controls.drawMode) return;
  //   setIsDrawing(true);
  //   e.stopPropagation();
  // };

  // const handlePointerUpOrOut = (e?: ThreeEvent<PointerEvent>) => {
  //   if (!controls.drawMode) return;
  //   setIsDrawing(false);
  //   if (e) e.stopPropagation();
  // };

  // const handlePointerMove = (e: ThreeEvent<PointerEvent>) => {
  //   if (!controls.drawMode) return;
  //   if (e.point) setCurPos(new Vector3().copy(e.point));
  //   if (isDrawing) onPointerMove(e);
  // };
  return (
    <>
      <group>
        {/* –ü–Ü–î–õ–û–ì–ê: –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑ UV (PlaneGeometry –º–∞—î —ó—Ö –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º) */}
        <RigidBody userData={{ isGround: true }} type="fixed">
          <mesh
            ref={floorRef}
            rotation={[-Math.PI / 2, 0, 0]}
            receiveShadow
            castShadow
            // onPointerDown={handlePointerDown}
            // onPointerUp={handlePointerUpOrOut}
            // onPointerLeave={handlePointerUpOrOut}
            // onPointerMove={handlePointerMove}
          >
            <planeGeometry args={[width, height, 1, 1]} />
            {/* –î–ï–ú–û-–º–∞—Ç–µ—Ä—ñ–∞–ª: –Ω–∞–∫–ª–∞–¥–∞—î–º–æ –∫–∞—Ä—Ç—É —è–∫ map, —â–æ–± –±–∞—á–∏—Ç–∏ –º–∞–∑–∫–∏.
–£ –≤–∞—à–æ–º—É –ø—Ä–æ—î–∫—Ç—ñ, –π–º–æ–≤—ñ—Ä–Ω–æ, –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏–º–µ—Ç–µ texture —è–∫ uniform —É —à–µ–π–¥–µ—Ä –∞–±–æ —è–∫ alphaMap. */}
            <meshStandardMaterial color="#FFBF74" />
          </mesh>
        </RigidBody>

        {/* –ö–û–õ–û-–ö–£–†–°–û–†, —â–æ —Å–ª—ñ–¥—É—î –∑–∞ –º–∏—à–µ—é, –∫–æ–ª–∏ drawMode=true */}
        {/* {controls.drawMode && (
          <mesh position={cursorPos} rotation-x={-Math.PI / 2}>
            <ringGeometry
              args={[
                Math.max(0.0001, worldCursorRadius * 0.6),
                Math.max(0.00015, worldCursorRadius),
                48,
              ]}
            />
            <meshBasicMaterial transparent opacity={0.6} />
          </mesh>
        )} */}
      </group>
    </>
  );
};

export default Ground;
